@skip { whitespace }

@precedence {
  else @left,
  then @left,
  name,
  call,
  filter @left,
  qnamePath @left,
  path @left,
  instanceOf,
  prefix,
  exp @left,
  times @left,
  add @left,
  compare @left,
  and @left,
  or @left,
  unaryTest @cut
}

@top[name=Script] {
  expression+
}

expression {
  textualExpression |
  boxedExpression
}

textualExpressions {
  commaSep<textualExpression>
}

textualExpression {
  ForExpression {
    kw<"for"> InExpressions<IterationContext> kw<"return"> expression
  } |
  IfExpression {
    kw<"if"> expression !then kw<"then"> expression (!else kw<"else"> expression)?
  } |
  QuantifiedExpression {
    (kw<"some"> | kw<"every">) InExpressions<expression> kw<"satisfies"> expression
  } |
  Disjunction {
    expression !or kw<"or"> expression
  } |
  Conjunction {
    expression !and kw<"and"> expression
  } |
  Comparison |
  ArithmeticExpression |
  UnaryExpression |
  InstanceOf {
    expression !instanceOf instanceOf Type
  } |
  PathExpression {
    expression !path "." Name
  } |
  FilterExpression {
    expression !filter "[" expression "]"
  } |
  FunctionInvocation |
  literal |
  QualifiedName ~qname /* TODO(nikku): should be name according to spec */ |
  kw<"?"> |
  SuperSimplePositiveUnaryTest |
  ParenthesizedExpression { "(" textualExpression ")" }
}

boxedExpression {
  List |
  FunctionDefinition |
  Context
}

InExpressions<Expr> {
  commaSep1<InExpression<Expr>>
}

InExpression<Expr> {
  Name InExtractor Expr
}

InExtractor {
  kw<"in">
}

IterationContext {
  expression (".." expression)?
}

UnaryExpression {
  !prefix ArithOp<"+"> expression |
  !prefix Minus expression
}

ArithmeticExpression {
  expression !add ArithOp<"+"> expression |
  expression !add Minus expression |
  expression !times ArithOp<"*" | "/"> expression |
  expression !exp ArithOp<"^" | "**"> expression
}

Comparison {
  expression !compare CompareOp<"=" | "!="> expression |
  expression !compare CompareOp<Gt | Gte | Lt | Lte> expression |
  expression !compare kw<"between"> expression kw<"and"> expression |
  expression !compare InTester PositiveUnaryTest |
  expression !compare InTester !unaryTest "(" PositiveUnaryTests ")"
}

InTester {
  kw<"in">
}

SuperSimplePositiveUnaryTest {
  (CompareOp<Gt | Gte | Lt | Lte>) endpoint |
  Interval
}

SimplePositiveUnaryTests {
  SimplePositiveUnaryTests |
  kw<"not"> "(" SimplePositiveUnaryTests ")" |
  "-"
}

SimplePositiveUnaryTest {
  CompareOp<Gt | Gte | Lt | Lte>? endpoint |
  Interval
}

PositiveUnaryTests {
  commaSep1<PositiveUnaryTest>
}

PositiveUnaryTest {
  expression
}

FunctionDefinition {
  kw<"function"> "(" commaSep<FormalParameter> ")" kw<"external">? expression
}

FormalParameter {
  ParameterName (":" Type)?
}

Type {
  QualifiedName
}

Context {
  "{" commaSep<ContextEntry> "}"
}

ContextEntry {
  Key ":" expression
}

Key {
  Name |
  StringLiteral
}

FunctionInvocation {
  expression !call Parameters
}

Parameters {
  "(" (NamedParameters | PositionalParameters)? ")"
}

NamedParameters {
  commaSep1<ParameterName ":" expression>
}

ParameterName {
  Name
}

PositionalParameters {
  commaSep1<expression>
}

endpoint {
  QualifiedName ~qname |
  simpleLiteral ~literal
}

literal {
  kw<"null"> |
  simpleLiteral ~literal
}

simpleLiteral {
  NumericLiteral |
  StringLiteral |
  BooleanLiteral |
  DateTimeLiteral
}

QualifiedName {
  Name (!qnamePath "." Name)*
}

Interval {
  ( "]" | "(" | "[" ) ~interval endpoint ".." endpoint ( ")" | "[" | "]" )
}

List {
  "[" ~interval commaSep<expression> "]"
}

kw<Term> {
  @specialize[name={Term}]<Name, Term>
}

/*
ckw<Term> {
  @extend[name={Term}]<Name, Term>
}
*/

commaSep1<Expr> {
  Expr ("," Expr)*
}

commaSep<Expr> {
  "" | Expr ("," Expr)*
}


@tokens {

  VerticalSpace {
    $[\u000A-\u000D]
  }

  whitespace {
    VerticalSpace | std.whitespace+
  }

  Digit {
    $[0-9]
  }

  Digits {
    Digit+
  }

  Minus[name=ArithOp] { "-" }

  /* 35. string literal = """, { character â€“ (""" | vertical space) | string escape sequence}, """ ; */
  StringLiteral {
    '"' !["]* '"'
  }

  NumericLiteral {
    "-"? (Digits ("." Digits)? | "." Digits)
  }

  BooleanLiteral {
    "true" | "false"
  }

  instanceOf {
    "instance of"
  }

  DateTimeLiteral {
    "data time"
  }

  Gt { ">" }
  Lt { "<" }
  Gte { ">=" }
  Lte { "<=" }

  @precedence {
    BooleanLiteral,
    DateTimeLiteral,
    NumericLiteral,
    instanceOf,
    Name
  }

  @precedence {
    NumericLiteral,
    Minus
  }

  @precedence {
    NumericLiteral,
    "."
  }

  NameStart {
    nameStartChar namePartChar*
  }

  nameStartChar {
    "?" | $[A-Z] | "_" | $[a-z] |
    $[\u200C-\u200D] | $[\u2070-\u218F] | $[\u2C00-\u2FEF] | $[\u3001-\uD7FF] | $[\uF900-\uFDCF] | $[\uFDF0-\uFFFD] /* | $[\u10000-\uEFFFF] */
  }

  namePartChar {
    nameStartChar | Digit | $[\u0300-\u036F] | $[\u203F-\u2040]
  }

  NamePart {
    namePartChar+
  }

  Name {
    NameStart (NamePart)*
  }

  "(" ")" "[" "]" "{" "}"

  ArithOp<Expr> {
    Expr
  }

  CompareOp<Expr> {
    Expr
  }

}